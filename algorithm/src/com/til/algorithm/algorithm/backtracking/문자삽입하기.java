package com.til.algorithm.algorithm.backtracking;

/**
 *
 1+2+3+4+5+6+7
 1+2+3+4+5+6-7
 1+2+3+4+5-6+7
 1+2+3+4+5-6-7
 1+2+3+4-5+6+7
 1+2+3+4-5+6-7
 1+2+3+4-5-6+7
 1+2+3+4-5-6-7
 1+2+3-4+5+6+7
 1+2+3-4+5+6-7
 1+2+3-4+5-6+7
 1+2+3-4+5-6-7
 1+2+3-4-5+6+7
 1+2+3-4-5+6-7
 1+2+3-4-5-6+7
 1+2+3-4-5-6-7
 1+2-3+4+5+6+7
 1+2-3+4+5+6-7
 1+2-3+4+5-6+7
 1+2-3+4+5-6-7
 1+2-3+4-5+6+7
 1+2-3+4-5+6-7
 1+2-3+4-5-6+7
 1+2-3+4-5-6-7
 1+2-3-4+5+6+7
 1+2-3-4+5+6-7
 1+2-3-4+5-6+7
 1+2-3-4+5-6-7
 1+2-3-4-5+6+7
 1+2-3-4-5+6-7
 1+2-3-4-5-6+7
 1+2-3-4-5-6-7
 1-2+3+4+5+6+7
 1-2+3+4+5+6-7
 1-2+3+4+5-6+7
 1-2+3+4+5-6-7
 1-2+3+4-5+6+7
 1-2+3+4-5+6-7
 1-2+3+4-5-6+7
 1-2+3+4-5-6-7
 1-2+3-4+5+6+7
 1-2+3-4+5+6-7
 1-2+3-4+5-6+7
 1-2+3-4+5-6-7
 1-2+3-4-5+6+7
 1-2+3-4-5+6-7
 1-2+3-4-5-6+7
 1-2+3-4-5-6-7
 1-2-3+4+5+6+7
 1-2-3+4+5+6-7
 1-2-3+4+5-6+7
 1-2-3+4+5-6-7
 1-2-3+4-5+6+7
 1-2-3+4-5+6-7
 1-2-3+4-5-6+7
 1-2-3+4-5-6-7
 1-2-3-4+5+6+7
 1-2-3-4+5+6-7
 1-2-3-4+5-6+7
 1-2-3-4+5-6-7
 1-2-3-4-5+6+7
 1-2-3-4-5+6-7
 1-2-3-4-5-6+7
 1-2-3-4-5-6-7
 */
public class 문자삽입하기 {

    private static int n = 7;
    private static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) {
        backtracking(0, 1, "1");
        System.out.println(sb.toString());
    }

    private static void backtracking(int depth, int start, String s) {
        if (depth == n - 1) {
            sb.append(s).append("\n");
            return;
        }
        backtracking(depth + 1, start + 1, s + '+' + (start + 1));
        backtracking(depth + 1, start + 1, s + '-' + (start + 1));
    }

}
